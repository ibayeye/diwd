# -*- coding: utf-8 -*-

"""Support Vector Machine Model.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1JSFgjIkvCRiQLhXD9wtEnBlnvdQaIPVb
"""

# 1. Importing Libraries


# Standard library
import re

# Third-party libraries
import numpy as np
import pandas as pd
import seaborn as sns
import gc
import matplotlib.pyplot as plt
import json

"""# 2. Reading Data

"""

#Load Dataset
gc.enable()
data_directory_path = 'csv/'

# Membaca dataset
df = pd.read_csv(data_directory_path + 'error_device.csv')

def load_dataset():
    # Info umum
    baris_kolom = {
        "jumlah_baris": df.shape[0],
        "jumlah_kolom": df.shape[1]
    }

    tipe_data = df.dtypes.astype(str).to_dict()
    missing_values = df.isnull().sum().to_dict()
    duplicate_count = int(df.duplicated().sum())
    deskripsi = df.describe().to_dict()
    sample_data = df.head().to_dict(orient='records')

    result = {
        "sample_data": sample_data,
        "baris_dan_kolom": baris_kolom,
        "tipe_data": tipe_data,
        "missing_values": missing_values,
        "duplikat": duplicate_count,
        "deskriptif": deskripsi
    }

    return result

"""# 3. Data Cleaning

"""

def get_cleaned_df():
    df_cleaned = df.drop_duplicates()
    df_cleaned = df_cleaned[df_cleaned["Timestamp"] != "#VALUE!"]
    df_cleaned["Timestamp"] = pd.to_datetime(df_cleaned["Timestamp"], errors="coerce")
    df_cleaned = df_cleaned.dropna(subset=["Timestamp"])

    def classify_error(message):
        if pd.isna(message):
            return 0
        message = str(message)
        if "Kuota habis" in message:
            return 0
        elif "ETIMEDOUT" in message or "EHOSTUNREACH" in message:
            return 1
        elif "ECONNREFUSED" in message or "ECONNRESET" in message:
            return 2
        else:
            return 0

    df_cleaned['Status'] = df_cleaned['Error Message'].apply(classify_error)
    return df_cleaned


def clean_dataset():
    try:
        df_cleaned = get_cleaned_df()
        summary = {
            "total_data_awal": df.shape[0],
            "total_data_setelah_cleaning": df_cleaned.shape[0],
            "missing_values": df_cleaned.isnull().sum().to_dict(),
            "distribusi_status": df_cleaned['Status'].value_counts().to_dict(),
            "contoh_data": df_cleaned.head(5).to_dict(orient='records')
        }
        return summary
    except Exception as e:
        return {"error": str(e)}

"""# 4. Exploratory Data Analysis (EDA)"""

def hourly_error_trend():
    try:
        df_cleaned = get_cleaned_df()
        df_cleaned["Hour"] = df_cleaned["Timestamp"].dt.hour
        error_by_hour = df_cleaned['Hour'].value_counts().sort_index()
        return error_by_hour.to_dict()
    except Exception as e:
        return {"error": str(e)}

def top_hourly_error_messages(top_n=5):
    try:
        df_cleaned = get_cleaned_df()
        df_cleaned["Hour"] = df_cleaned["Timestamp"].dt.hour

        top_errors_per_hour = (
            df_cleaned.groupby(["Hour", "Error Message"])
            .size()
            .reset_index(name="Count")
        )

        top_errors = (
            top_errors_per_hour
            .sort_values(['Hour', 'Count'], ascending=[True, False])
            .groupby('Hour')
            .head(top_n)
        )

        return top_errors.to_dict(orient='records')
    except Exception as e:
        return {"error": str(e)}


# # Buat kolom 'Date' dari Timestamp jika belum ada
# df_cleaned["Date"] = df_cleaned["Timestamp"].dt.date

# # Hitung jumlah Error Message per tanggal
# daily_error_counts = (
#     df_cleaned.groupby(["Date", "Error Message"])
#     .size()
#     .reset_index(name="Count")
# )

# # Ambil 7 hari terakhir dari data
# last_7_days = sorted(df_cleaned["Date"].unique())[-7:]

# # Filter data hanya untuk 7 hari terakhir
# filtered_daily_errors = daily_error_counts[daily_error_counts["Date"].isin(last_7_days)]

# # Ambil top N error message terbanyak untuk tiap hari
# top_n = 3
# top_daily_errors = (
#     filtered_daily_errors
#     .sort_values(['Date', 'Count'], ascending=[True, False])
#     .groupby('Date')
#     .head(top_n)
# )

# # Visualisasi barplot top error message per hari selama 7 hari terakhir
# plt.figure(figsize=(16, 8))
# sns.barplot(
#     x="Date", y="Count", hue="Error Message",
#     data=top_daily_errors, dodge=True, palette="Set3"
# )

# plt.title(f"Top {top_n} Error Message per Hari (7 Hari Terakhir)")
# plt.xlabel("Tanggal")
# plt.ylabel("Jumlah Error")
# plt.xticks(rotation=45)
# plt.legend(title="Error Message", bbox_to_anchor=(1.05, 1), loc="upper left")
# plt.tight_layout()
# plt.show()

# # Hitung jumlah Status per tanggal
# daily_status_counts = (
#     df_cleaned.groupby(["Date", "Status"])
#     .size()
#     .reset_index(name="Count")
# )

# # Ambil 7 tanggal terakhir
# last_7_days = sorted(df_cleaned["Date"].unique())[-7:]

# # Filter hanya data dari 7 hari terakhir
# filtered_daily_status = daily_status_counts[daily_status_counts["Date"].isin(last_7_days)]

# # Mapping status ke label yang lebih informatif (opsional)
# status_labels = {0: 'Low', 1: 'Warning', 2: 'Critical'}
# filtered_daily_status["Status Label"] = filtered_daily_status["Status"].map(status_labels)

# # Buat pivot table supaya tiap Status Label jadi kolom dan tanggal jadi index
# pivot_status = filtered_daily_status.pivot(index="Date", columns="Status Label", values="Count").fillna(0)

# # Plot tren jumlah Status per hari
# plt.figure(figsize=(16, 8))
# for status_label in pivot_status.columns:
#     plt.plot(pivot_status.index, pivot_status[status_label], marker='o', label=status_label)

# plt.title("Tren Jumlah Status Error per Hari (7 Hari Terakhir)")
# plt.xlabel("Tanggal")
# plt.ylabel("Jumlah Error")
# plt.xticks(rotation=45)
# plt.legend(title="Status")
# plt.grid(True)
# plt.tight_layout()
# plt.show()

# # Tambahkan kolom 'Week' berdasarkan nomor minggu dari Timestamp
# df_cleaned["Week"] = df_cleaned["Timestamp"].dt.isocalendar().week

# # Hitung jumlah error per minggu
# weekly_errors = df_cleaned.groupby("Week").size()

# # Visualisasi jumlah error per minggu dalam bentuk bar chart
# plt.figure(figsize=(12, 6))
# weekly_errors.plot(kind="bar", color="red")

# plt.title("Jumlah Error per Minggu")
# plt.xlabel("Minggu ke-")
# plt.ylabel("Jumlah Error")
# plt.grid(axis='y')
# plt.tight_layout()
# plt.show()

# # Hitung jumlah error per minggu per Status
# weekly_status_counts = (
#     df_cleaned.groupby(["Week", "Status"])
#     .size()
#     .reset_index(name="Count")
# )

# # Mapping status ke label yang informatif (opsional)
# status_labels = {0: 'Low', 1: 'Warning', 2: 'Critical'}
# weekly_status_counts["Status Label"] = weekly_status_counts["Status"].map(status_labels)

# # Visualisasi tren jumlah error per Status tiap minggu
# plt.figure(figsize=(12, 6))
# sns.lineplot(x="Week", y="Count", hue="Status Label", data=weekly_status_counts, marker="o", palette="Set1")

# plt.title("Tren Jumlah Status Error per Minggu")
# plt.xlabel("Minggu")
# plt.ylabel("Jumlah Error")
# plt.xticks(rotation=45)
# plt.grid(True)
# plt.tight_layout()
# plt.show()

# # Hitung jumlah error message per minggu
# weekly_error_msg = (
#     df_cleaned.groupby(["Week", "Error Message"])
#     .size()
#     .reset_index(name="Count")
# )

# # Ambil top 3 error message tiap minggu
# top_n = 3
# top_weekly_error_msg = (
#     weekly_error_msg
#     .sort_values(["Week", "Count"], ascending=[True, False])
#     .groupby("Week")
#     .head(top_n)
# )

# # Visualisasi barplot top error message per minggu
# plt.figure(figsize=(16, 8))
# sns.barplot(x="Week", y="Count", hue="Error Message", data=top_weekly_error_msg, dodge=True, palette="Set2")

# plt.title(f"Top {top_n} Error Message per Minggu")
# plt.xlabel("Minggu")
# plt.ylabel("Jumlah Error")
# plt.xticks(rotation=45)
# plt.legend(title="Error Message", bbox_to_anchor=(1.05, 1), loc="upper left")
# plt.tight_layout()
# plt.show()

# # Tambahkan kolom 'Month' berdasarkan bulan dari Timestamp
# df_cleaned["Month"] = df_cleaned["Timestamp"].dt.to_period("M").astype(str)

# # Visualisasi jumlah error per bulan
# plt.figure(figsize=(12, 6))
# sns.countplot(x=df_cleaned["Month"], order=sorted(df_cleaned["Month"].unique()), color="royalblue")

# plt.xticks(rotation=45)
# plt.xlabel("Bulan")
# plt.ylabel("Jumlah Error")
# plt.title("Distribusi Error per Bulan")
# plt.show()

# # Hitung jumlah status per bulan
# monthly_status_trend = (
#     df_cleaned.groupby(["Month", "Status"])
#     .size()
#     .reset_index(name="Count")
# )

# # Mapping status
# status_labels = {0: "Low", 1: "Warning", 2: "Critical"}
# monthly_status_trend["Status Label"] = monthly_status_trend["Status"].map(status_labels)

# # Visualisasi tren status
# plt.figure(figsize=(14, 7))
# sns.lineplot(data=monthly_status_trend, x="Month", y="Count", hue="Status Label", marker="o")
# plt.title("Tren Status Error per Bulan")
# plt.xlabel("Bulan")
# plt.ylabel("Jumlah Error")
# plt.xticks(rotation=45)
# plt.legend(title="Status", bbox_to_anchor=(1.05, 1), loc="upper left")
# plt.tight_layout()
# plt.grid(True)
# plt.show()

# # Hitung jumlah error message per bulan
# monthly_error_msg = (
#     df_cleaned.groupby(["Month", "Error Message"])
#     .size()
#     .reset_index(name="Count")
# )

# # Ambil top 3 error message tiap bulan
# top_n = 3
# top_monthly_error_msg = (
#     monthly_error_msg
#     .sort_values(["Month", "Count"], ascending=[True, False])
#     .groupby("Month")
#     .head(top_n)
# )

# # Visualisasi error message tiap bulan
# plt.figure(figsize=(16, 8))
# sns.barplot(x="Month", y="Count", hue="Error Message", data=top_monthly_error_msg, dodge=True, palette="Pastel2")
# plt.title(f"Top {top_n} Error Message per Bulan")
# plt.xlabel("Bulan")
# plt.ylabel("Jumlah Error")
# plt.xticks(rotation=45)
# plt.legend(title="Error Message", bbox_to_anchor=(1.05, 1), loc="upper left")
# plt.tight_layout()
# plt.show()

# # Ubah kode Status menjadi label teks yang mudah dibaca
# status_labels = {0: "Low", 1: "Warning", 2: "Critical"}
# df_cleaned['Status Label'] = df_cleaned['Status'].map(status_labels)

# # Visualisasi distribusi Status Error dengan pie chart
# plt.figure(figsize=(6, 6))
# df_cleaned['Status Label'].value_counts().plot.pie(
#     autopct='%1.1f%%',
#     startangle=140,
#     colors=["#90ee90", "#ffcc00", "#ff6666"]
# )
# plt.title("Distribusi Status Error")
# plt.ylabel("")
# plt.tight_layout()
# plt.show()

# # Hitung jumlah kemunculan tiap Error Message
# error_counts = df_cleaned['Error Message'].value_counts()

# # Ambil top 5 error
# top_n = 5
# top_errors = error_counts.head(top_n)

# # Gabungkan sisa error sebagai 'Lainnya'
# others = error_counts[top_n:].sum()
# error_labels = list(top_errors.index) + ['Lainnya']
# error_values = list(top_errors.values) + [others]

# # Visualisai menggunakan Pie Chart
# plt.figure(figsize=(7, 7))
# plt.pie(
#     error_values,
#     labels=error_labels,
#     autopct='%1.1f%%',
#     startangle=140,
#     colors=sns.color_palette("pastel")[0:top_n+1]
# )

# plt.title(f"Distribusi Top {top_n} Error Message")
# plt.tight_layout()
# plt.show()

# # Pastikan label status sudah ada dalam bentuk teks
# status_labels = {0: "Low", 1: "Warning", 2: "Critical"}
# df_cleaned['Status Label'] = df_cleaned['Status'].map(status_labels)

# # Hitung jumlah tiap Error Message per Status
# top_n = 5
# top_errors_by_status = (
#     df_cleaned.groupby(['Status Label', 'Error Message'])
#     .size()
#     .reset_index(name='Count')
#     .sort_values(['Status Label', 'Count'], ascending=[True, False])
# )

# # Ambil top 5 error message untuk setiap status
# top_errors_filtered = (
#     top_errors_by_status.groupby('Status Label')
#     .head(top_n)
#     .reset_index(drop=True)
# )

# # Visualisasi barplot top error message per status dengan warna sesuai status
# plt.figure(figsize=(14, 8))
# sns.barplot(
#     data=top_errors_filtered,
#     x='Count',
#     y='Error Message',
#     hue='Status Label',
#     palette={'Low': '#90ee90', 'Warning': '#ffcc00', 'Critical': '#ff6666'}
# )

# plt.title(f"Top {top_n} Error Message per Status")
# plt.xlabel("Jumlah Error")
# plt.ylabel("Error Message")
# plt.legend(title="Status", bbox_to_anchor=(1.05, 1), loc="upper left")
# plt.tight_layout()
# plt.show()

# # Hitung jumlah kemunculan setiap error message
# error_counts = df_cleaned["Error Message"].value_counts()

# # Hitung jumlah error unik dan tidak unik
# num_unique = (error_counts == 1).sum()
# num_not_unique = (error_counts > 1).sum()

# # Buat pie chart
# plt.figure(figsize=(6, 6))
# plt.pie([num_unique, num_not_unique], labels=["Unik (1x Muncul)", "Tidak Unik (>1x Muncul)"],
#         autopct="%1.1f%%", colors=["royalblue", "tomato"], startangle=90)
# plt.title("Distribusi Error Message Unik vs Tidak Unik")
# plt.show()